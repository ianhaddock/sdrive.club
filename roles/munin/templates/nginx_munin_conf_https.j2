server {
  listen 443 ssl;
  listen [::]:443 ssl;
  server_name {{ app_name }}.{{ site_fqdn }};
  client_max_body_size 256m;

  root /var/www/html/munin;

  index index.html;

  ssl_certificate /etc/letsencrypt/live/{{ site_fqdn }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ site_fqdn }}/privkey.pem;
#  include /etc/letsencrypt/options-ssl-nginx.conf;
#  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  error_page 401 /401/401-error.html;
  location /401 {
        root {{ nginx_path }}/error_pages;
  }

  error_page 404 /404/404-error.html;
  location /404 {
        root {{ nginx_path }}/error_pages;
  }

  error_page 500 502 503 504 /50x/50x-error.html;
  location /50x {
        root {{ nginx_path }}/error_pages;
  }

  #https://guide.munin-monitoring.org/en/latest/example/webserver/nginx-cron.html#example-webserver-nginx-cron
  location /munin/static/ {
    alias /var/www/html/munin/static/;
    expires modified +1w;
  }

  location /munin/ {
    auth_basic            "Restricted";
    # Create the htpasswd file with the htpasswd tool.
    auth_basic_user_file  /etc/nginx/htpasswd;

    alias /var/www/html/munin/;
    expires modified +310s;
  }

  location ^~ /munin-cgi/munin-cgi-graph/ {
    # access_log off;
    fastcgi_split_path_info ^(/munin-cgi/munin-cgi-graph)(.*)$;
    fastcgi_param PATH_INFO $fastcgi_path_info;
    fastcgi_pass unix:/var/run/munin/munin-cgi-graph.sock;
    include fastcgi_params;
  }

  location = / {
    rewrite ^/$ munin/ redirect; break;
  }


#  # only allow static file serving
#  location ~* \.(jpg|jpeg|gif|png|bmp|ico|pdf|flv|swf|exe|html|htm|txt|css|js) {
#     add_header        Cache-Control public;
#     add_header        Cache-Control must-revalidate;
#     expires           7d;
#  }

}

server {
  listen 80;
  listen [::]:80;
  server_name {{ app_name }}.{{ site_fqdn }};
  client_max_body_size 256m;

  # 301 redirect
  location  / {
     deny all;
     return 301 https://{{ app_name }}.{{ site_fqdn }}$request_uri;
  }
}
