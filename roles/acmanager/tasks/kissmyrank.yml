# install kissmyrank single server

---

- name: check for "{{ acserverPath }}/kissmyrank"
  ansible.builtin.stat:
    path: "{{ acserverPath }}/kissmyrank"
  register: kmr_path

    # - name: install kissmyrank if missing
    #   ansible.builtin.unarchive:
    #     src: ac_kissmyrank.zip
    #     dest: "{{ acserverPath }}"
    #     owner: "{{ assettouser }}"
    #     group: "{{ assettogroup }}"
    #   when: not kmr_path.stat.exists

- name: install kissmyrank if missing
  ansible.builtin.unarchive:
    src: 'https://www.dropbox.com/sh/7lp4mobixpdx7x3/AAACmLqtFgNf7yMtQvqZj8sJa/ac_kissmyrank.zip?dl=1'
    dest: "{{ acserverPath }}"
    owner: "{{ assettouser }}"
    group: "{{ assettogroup }}"
    remote_src: true  
  when: not kmr_path.stat.exists

- name: remove windows KMR files
  ansible.builtin.file:
    dest: "{{ acserverPath }}/ac_kissmyrank_win"
    state: absent
  when: not kmr_path.stat.exists

- name: rename KMR folder
  ansible.builtin.copy:
    remote_src: true
    src: "{{ acserverPath }}/ac_kissmyrank_linux/"
    dest: "{{ acserverPath }}/kissmyrank"
    owner: "{{ assettouser }}"
    group: "{{ assettogroup }}"
    mode: '0755'
  when: not kmr_path.stat.exists

- name: make kissmyrank executable
  ansible.builtin.file:
    dest: "{{ acserverPath }}/kissmyrank/ac_kissmyrank-linux"
    mode: '0744'
  when: not kmr_path.stat.exists

- name: install custom index.html file
  ansible.builtin.template:
    src: templates/kissmyrank_index.html.j2
    dest: "{{ acserverPath }}/kissmyrank/index.html"
    owner: '{{ assettouser }}'
    group: '{{ assettogroup }}'
    mode: '0644'

- name: check for kmr options file
  ansible.builtin.stat:
    path: "{{ acmanagerStorePath }}/kissmyrank_options.json"
  register: kmr_options_file_check

- name: install kmr options template
  ansible.builtin.template:
    src: templates/kissmyrank_options.json.j2
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    owner: "{{ assettouser }}"
    group: "{{ assettogroup }}"
    mode: '0644'
  when: not kmr_options_file_check.stat.exists

- name: enable KMR
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    regexp: '^  "EnableKissMyRank": '
    line: '  "EnableKissMyRank": true,'

- name: set web_stats_interface
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    regexp: '^  "web_stats_interface": '
    line: '  "web_stats_interface": {{ web_stats_interface }},'

- name: set web_stats_server_port
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    regexp: '^  "web_stats_server_port": '
    line: '  "web_stats_server_port": {{ kmr_web_stats_port_prefix }}00,'

- name: set web stats public http URL
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    regexp: '^  "web_stats_public_url":'
    line: '  "web_stats_public_url": "http://kmr00.{{ siteFQDN }}",'
  when: not cert_enabled

- name: set web stats public https URL
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    regexp: '^  "web_stats_public_url":'
    line: '  "web_stats_public_url": "https://kmr00.{{ siteFQDN }}",'
  when: cert_enabled

- name: set web stat console password
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    regexp: '^  "web_admin_console_password": '
    line: '  "web_admin_console_password": "{{ kmr_web_console_password }}",'

- name: set web_auth_server_port
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    state: present
    regexp: '^  "web_auth_server_port": '
    line: '  "web_auth_server_port": {{ plugin_udp_port_prefix }}000,'

- name: set cut lines
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    regexp: '^  "cut_lines_enabled": '
    line: '  "cut_lines_enabled": {{ cut_lines_enabled }},'

- name: set right to be forgotten
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    regexp: '^  "right_to_be_forgotten_chat_command": '
    line: '  "right_to_be_forgotten_chat_command": {{ right_to_be_forgotten }},'

- name: set database sharing unique name
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    regexp: '^  "database_sharing_unique_name": '
    line: '  "database_sharing_unique_name": "svr00",'

- name: set database sharing group port
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    regexp: '^  "database_sharing_local_group_port": '
    line: '  "database_sharing_local_group_port": {{ kmr_database_port }},'

- name: Set ac_app_link_udp_port
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    state: present
    regexp: '^  "ac_app_link_udp_port": '
    line: '  "ac_app_link_udp_port": {{ kmr_ac_app_link_prefix }}000,'

- name: set show race control link
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    regexp: '^  "chat_driver_welcome_message_show_race_control_link": '
    line: '  "chat_driver_welcome_message_show_race_control_link": {{ show_race_control_link }},'

# set race control password
# The password that Race Directors need to use to judge collisions via the Web
#  Stats Page (needs to be at least 8 characters long or the feature will be
# disabled).

- name: set race control password - 8 char min
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    regexp: '^  "race_control_password": "",'
    line: '  "race_control_password": "{{ kmr_race_control_password }}",'

- name: set chat admin password
  ansible.builtin.lineinfile:
    dest: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    regexp: '^  "ac_chat_admin_password": '
    line: '  "ac_chat_admin_password": "{{ admin_chat_password }}",'

- name: set chat admin GUIDs
  ansible.builtin.replace:
    path: "{{ acmanagerStorePath }}/kissmyrank_options.json"
    after: '(  "ac_chat_admin_guid_list": \[)'
    before: '(  \],)'
    regexp: '^    \"\"'
    replace: "{{ admin_uuids }}"
