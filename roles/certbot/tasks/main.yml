# configure certbot and setup certs

---
- name: install nginx
  ansible.builtin.package: # noqa package-latest
    name: nginx
    state: latest

- name: certbot nginx plugin
  ansible.builtin.package: # noqa package-latest
    name: python3-certbot-nginx
    state: present

- name: install epel-release
  ansible.builtin.package: # noqa package-latest
    name: epel-release
    state: latest
  when: ansible_os_family == 'RedHat'

- name: install certbot
  ansible.builtin.package: # noqa package-latest
    name: certbot
    state: latest

- name: check if cerbot certificate directory exists
  ansible.builtin.stat:
    path: '/etc/letsencrypt/live/{{ site_fqdn }}'
  register: certbot_dir

- name: get current subdomain count
  ansible.builtin.find:
    path: '/etc/nginx/conf.d/'
    patterns: "*.conf"
  register: nginx_subdomain_count

- name: set existing sub_domain count
  ansible.builtin.set_fact:
    nginx_domain_count: "{{ nginx_subdomain_count.matched | int }}"

- name: debug nginx subdomain count
  ansible.builtin.debug:
    msg: "current nginx conf file count {{ nginx_subdomain_count.matched }}"
  when: verbose

- name: debug nginx subdomain count
  ansible.builtin.debug:
    msg: "{{ item.path }}"
  with_items: "{{ nginx_subdomain_count.files }}"
  when: verbose

- name: create updated subdomain list
  ansible.builtin.set_fact:
    sub_domains: "['{{ site_fqdn }}']"

- name: add subdomains var list to list
  ansible.builtin.set_fact:
    sub_domains: "{{ sub_domains|default([]) }} + ['{{ item }}.{{ site_fqdn }}']"
  with_items: "{{ certbot_subdomain_prefixes }}"

- name: add kmr subdomains to list
  ansible.builtin.set_fact:
    sub_domains: "{{ sub_domains|default([]) }} + ['kmr{{ item }}.{{ site_fqdn }}']"
  with_sequence: start=0 end={{ server_count -1 }} format=%02x

- name: cat list to string for certbot
  ansible.builtin.set_fact:
    sub_domain_str: "{{ sub_domains | join(', ') }}"

- name: get new sub_domain_count
  ansible.builtin.set_fact:
    sub_domain_count: "{{ sub_domains | length }}"

- name: debug list of subdomains
  ansible.builtin.debug:
    msg: [
      'current nginx_subdomain_count: {{ nginx_domain_count }}',
      'new subdomain_count: {{ sub_domain_count }}',
      'new subdomains list: {{ sub_domains }}',
      'certbot subdomain string: {{ sub_domain_str }}'
    ]
  when: verbose

- name: stop nginx for certs
  ansible.builtin.service:
    name: nginx
    state: stopped

- name: request new or update certificates if count does not match
  ansible.builtin.command:
    cmd: 'certbot certonly --standalone --non-interactive --expand --agree-tos -m "{{ certbot_email }}" -d "{{ sub_domain_str }}"'
  when:
    certbot_dir.stat.exists and nginx_domain_count < sub_domain_count
  register: certbot_certonly_output

- name: output of certbot
  ansible.builtin.debug:
    msg: "certbot output {{ certbot_certonly_output }}"
  when: verbose

- name: update existing letsencrypt certificates when path exists
  ansible.builtin.command:
    cmd: 'certbot renew'
  when: certbot_dir.stat.exists and not certbot_certonly_output.changed
  register: certbot_renew_output

- name: output of certbot renew
  ansible.builtin.debug:
    msg: "certbot renew output {{ certbot_renew_output }}"
  when: verbose

- name: start nginx if stopped for certs
  ansible.builtin.service:
    name: nginx
    state: started
