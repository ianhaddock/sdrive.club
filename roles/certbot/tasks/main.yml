# configure certbot and setup certs

---
- name: install nginx
  ansible.builtin.package: # noqa package-latest
    name: nginx
    state: latest

- name: certbot nginx plugin
  ansible.builtin.package: # noqa package-latest
    name: python3-certbot-nginx
    state: present

- name: install epel-release
  ansible.builtin.package: # noqa package-latest
    name: epel-release
    state: latest
  when: ansible_os_family == 'RedHat'

- name: install certbot
  ansible.builtin.package: # noqa package-latest
    name: certbot
    state: latest

- name: check if cerbot certificate directory exists
  ansible.builtin.stat:
    path: '/etc/letsencrypt/live/{{ site_fqdn }}'
  register: certbot_dir

- name: install cert renew script
  ansible.builtin.template:
    src: certbot_renew.sh
    dest: /usr/sbin/cerbot_renew.sh
    owner: root
    group: root
    mode: '0740'

- name: create cerbot cert renew logfile
  ansible.builtin.file:
    path: "/var/log/cerbot_renew.log"
    owner: root
    group: root
    state: touch

- name: add cert renew to root crontab
  become: true
  ansible.builtin.cron:
    name: "cerbot renew"
    day: 2,28
    hour: 3
    minute: 3
    job: "/usr/sbin/cerbot_renew.sh >> /var/log/cerbot_renew.log"

- name: add domain check script
  ansible.builtin.template:
    src: 'get_domain_count.sh.j2'
    dest: '/etc/letsencrypt/get_domain_count.sh'
    owner: root
    group: root
    mode: '0700'

- name: get current subdomain count
  ansible.builtin.command:
    cmd: /etc/letsencrypt/get_domain_count.sh
  register: certbot_subdomain_count

- name: set existing sub_domain count
  ansible.builtin.set_fact:
    certbot_domain_count: "{{ certbot_subdomain_count.stdout | int }}"

- name: create updated subdomain list
  ansible.builtin.set_fact:
    sub_domains: "{{ site_fqdn }}"

- name: add subdomains var list to list
  ansible.builtin.set_fact:
    sub_domains: "{{ sub_domains }}, {{ item }}.{{ site_fqdn }}"
  with_items: "{{ certbot_subdomain_prefixes }}"

- name: add kmr subdomains to list
  ansible.builtin.set_fact:
    sub_domains: "{{ sub_domains }}, kmr{{ item }}.{{ site_fqdn }}"
  with_sequence: start=0 end={{ server_count -1 }} format=%02x

- name: get new sub_domain_count
  ansible.builtin.set_fact:
    sub_domain_count: "{{ sub_domains | split(',') | length }}"

- name: debug list of subdomains
  ansible.builtin.debug:
    msg: [
      'current subdomain count: {{ certbot_domain_count }}',
      'new subdomain count: {{ sub_domain_count }}',
      'new subdomains list: {{ sub_domains }}',
    ]
  when: verbose

- name: stop nginx for certs
  ansible.builtin.service:
    name: nginx
    state: stopped

- name: request new or update certificates if count does not match
  ansible.builtin.command:
    cmd: 'certbot certonly --dry-run --standalone --non-interactive --expand --agree-tos -m "{{ certbot_email }}" -d "{{ sub_domains }}"'
  when: certbot_domain_count != sub_domain_count
  register: certbot_certonly_output

- name: output of certbot
  ansible.builtin.debug:
    msg: "certbot output {{ certbot_certonly_output }}"
  when: verbose

- name: update existing letsencrypt certificates when path exists
  ansible.builtin.command:
    cmd: 'certbot renew'
  when: certbot_dir.stat.exists and not certbot_certonly_output.changed
  register: certbot_renew_output

- name: output of certbot renew
  ansible.builtin.debug:
    msg: "certbot renew output {{ certbot_renew_output }}"
  when: verbose

- name: start nginx if stopped for certs
  ansible.builtin.service:
    name: nginx
    state: started
