#!/bin/bash -e

# # #
#
# v20230715: v2 rewrite
# v20230725: add times, format zip action, remove shared_data.zip
#
# Added by Ansible {{ ansible_date_time.date }}
#
# # #

function usage() {
  echo "";
  echo "Backup ACSM game server files excluding license files."
  echo "Requires get_version.sh script to run.";
  echo "";
  echo " -h: This help menu.";
  echo "";
}

destination="{{ backup_path }}"
acserver="{{ acserver_path }}"
acmanager="{{ acmanager_path }}"
datestamp="$(date +%Y%m%d)"
PIDFILE=/tmp/acsm_backup.PID
used_space="$(df -k / | tail -n1 | awk '{print $5}' | sed 's/%//g')"
drive_full=95

# sanity checks
version="$({{ acmanager_path }}/get_version.sh)"
if [ $? != 0 ]; then
    usage;
    echo "$(date +%Y%m%d:%H%M%S): Script requries get_version.sh to run. Exiting.";
    exit 1;
elif [ $used_space -gt $drive_full ]; then
    usage;
    echo "$(date +%Y%m%d:%H%M%S): Exiting. Not enough space available, over $used_space% full";
    exit 1;
elif [ -f $PIDFILE ]; then
    echo "WARNING: acsm_backup script already running. Exiting.";
    exit 0;
fi

# remove PID file on exit
trap 'rm -f $PIDFILE' EXIT
echo $$ > $PIDFILE

# compress files, content
echo "$(date +%Y%m%d:%H%M%S): Starting backup."

# archive app except license file and content folder
zip -y \
  -r \
  {{ backup_path }}/"$version"_"$datestamp".zip \
  "$acmanager" "$acserver" \
  -x "{{ acserver_path }}/content" \
  -x \*.License \
  -x \*.zip \
  -li \
  -lf {{ backup_path }}/"$version"_"$datestamp".log

# archive content folder by updating yesterday's zip
zip -y \
  -r \
  {{ backup_path }}/acsm_content.zip \
  {{ acserver_path }}/content

# exit
echo "$(date +%Y%m%d:%H%M%S): Backup complete. Exiting"
echo "Time taken: $SECONDS seconds.";
times;
echo "";

rm -f "$PIDFILE";

exit 0;
